#! /usr/bin/python3

import os
import sys
import yaml

with open('cyrix.yaml', 'r') as file:
	db = yaml.safe_load(file)

registers = {}

for register in db['registers']:
	value = register['number']
	if type(value) is list:
		values = set()
		for entry in value:
			value1 = entry['number']
			if type(value1) is str:
				entry['number'] = {int(v, 0) for v in value1.split(',')}
				values.update(entry['number'])
			elif type(value1) is int:
				values.add(value1)
				entry['number'] = {value1}
			entry['used'] = {v.strip() for v in entry['used'].split(',')}
	elif type(value) is str:
		values = {int(v, 0) for v in value.split(',')}
		register['number'] = values
	elif type(value) is int:
		values = {value}
		register['number'] = values

	register['used'] = {v.strip() for v in register['used'].split(',')}
	if 'used-non-port' in register:
		register['used-non-port'] = {v.strip() for v in register['used-non-port'].split(',')}

	if type(register['name']) is list:
		for entry in register['name']:
			entry['used'] = {v.strip() for v in entry['used'].split(',')}

	if 'fields' in register:
		for field in register['fields']:
			if 'used' in field:
				field['used'] = {v.strip() for v in field['used'].split(',')}
			if type(field['name']) is list:
				for case in field['name']:
					if 'used' in case:
						case['used'] = {v.strip() for v in case['used'].split(',')}

	for value in values:
		key = value, str(register.get('mapen', 0))
		if key not in registers:
			registers[key] = []
		registers[key].append(register)

with open('cyrix.html', 'w') as file:
	print("""<!doctype html>
<!-- This file is automatically generated -->
<html>
<head>
<title>Cyrix configuration registers</title>
<style>
td {
	text-align: center;
}
</style>
</head>
<body>""", file = file)

	print("""<h1>Overview of Cyrix configuration registers</h1>
<table align='center' border='1'>
<tr>
<td>MAPEN</td>
<td>Index</td>""", file = file)

	for cpu in db['cpus']:
		print(f"<td>{cpu['description']}</td>", file = file)

	print("</tr>", file = file)

	for key in sorted(registers.keys()):
		index, mapen = key
		if '/' in mapen:
			mapen = mapen.split('/')
			mapen = 'R:' + mapen[0] + '<br>W:' + mapen[1]

		print("<tr>", file = file)
		if mapen == "0":
			print("<td style='background:gray;'></td>", file = file)
		else:
			print(f"<td>{mapen}</td>", file = file)
		print(f"<td>{index:02X}</td>", file = file)
		for cpu in db['cpus']:
			for definition in registers[key]:
				if 'used-non-port' in definition and cpu['id'] in definition['used-non-port']:
					continue
				if cpu['id'] in definition['used']:
					if type(definition['number']) is list:
						used = False
						for version in definition['number']:
							if cpu['id'] in version['used']:
								used = index in version['number']
								break
						if not used:
							continue
					name = definition['name']
					if type(name) is list:
						for entry in name:
							if cpu['id'] in entry['used']:
								name = entry['name']
								break
						else:
							name = "?"
					print(f"<td>{name}</td>", file = file)
					break
			else:
				print("<td style='background:gray;'></td>", file = file)
		print("</tr>", file = file)

	print("""</table>
<h1>Detailed Cyrix configuration register layout</h1>
<table align='center' border='1'>
<tr>
<td>MAPEN</td>
<td>Index</td>
<td>Name</td>
<td>Bit</td>""", file = file)

	for cpu in db['cpus']:
		print(f"<td>{cpu['description']}</td>", file = file)

	print("</tr>", file = file)

	for key in sorted(registers.keys()):
		if not any('fields' in definition for definition in registers[key]):
			continue

		index, mapen = key
		if '/' in mapen:
			mapen = mapen.split('/')
			mapen = 'R:' + mapen[0] + '<br>W:' + mapen[1]

		print("<tr>", file = file)
		if mapen == "0":
			print("<td rowspan='8' style='background:gray;'></td>", file = file)
		else:
			print(f"<td rowspan='8'>{mapen}</td>", file = file)
		print(f"<td rowspan='8'>{index:02X}</td>", file = file)
		print(f"<td rowspan='8'>{registers[key][0]['id'].upper()}</td>", file = file)

		for bit in range(8):
			if bit != 0:
				print("<tr>", file = file)
			print(f"<td>{bit}</td>", file = file)

			for cpu in db['cpus']:
				for definition in registers[key]:
					if 'fields' not in definition:
						continue

					if cpu['id'] in definition['used']:
						if type(definition['number']) is list:
							used = False
							for version in definition['number']:
								if cpu['id'] in version['used']:
									used = index in version['number']
									break
							if not used:
								continue
					else:
						continue

					for field in definition['fields']:
						if 'used' in field and cpu['id'] not in field['used']:
							continue
						if 'number' in field and field['number'] != index:
							continue
						if 'bit' in field:
							if bit == field['bit']:
								rowspan = ''
								name = field['name']
								break
						elif 'bits' in field:
							lower, upper = map(int, field['bits'].split('-'))
							if bit == lower:
								rowspan = f" rowspan='{upper - lower + 1}'"
								name = field['name']
								break
							elif lower < bit <= upper:
								name = None
								break
					else:
						continue

					if name is None:
						break

					if type(name) is list:
						for case in name:
							if cpu['id'] in case['used']:
								name = case['name']
								break
						else:
							name = "?"

					print(f"<td{rowspan}>{name}</td>", file = file)
					break
				else:
					print("<td style='background:gray;'></td>", file = file)

			print("</tr>", file = file)

	print("""</table>""", file = file)

	print("""</body>
</html>""", file = file)

